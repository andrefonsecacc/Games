package com.chess.engine.board;

import java.util.HashMap;
import java.util.Map;

import com.chess.engine.pieces.Piece;

public abstract class Tile {

	protected final int tileCoordinate;
	
	private static final Map<Integer,EmptyTile> EMPTY_TILES = creatAllPossibleEmptyTiles();
	
	Tile(int tileCoordinate){
		this.tileCoordinate=tileCoordinate;
	}
	
	private static Map<Integer, EmptyTile> creatAllPossibleEmptyTiles() {
		
		final Map<Integer,EmptyTile> emptyTileMap = new HashMap<>();
		
		return null;
	}

	public abstract boolean isTileOccupied();
	
	public abstract Piece getPiece();
	
	public static final class EmptyTile extends Tile{
		EmptyTile( final int coordinate){
			super(coordinate);
		}
		
		@Override
		public boolean isTileOccupied(){
			return false;
		}
		
		@Override
		public Piece getPiece(){
			return null;
		}
	}
	
	public static final class OccupiedTile extends Tile{
		
		private final Piece pieceOnTile;
		
		OccupiedTile(final int tileCoordinate,Piece pieceOnTile){
			super(tileCoordinate);
			this.pieceOnTile=pieceOnTile;
		}
		
		@Override
		public boolean isTileOccupied(){
			return true;
		}
		
		@Override
		public Piece getPiece(){
			return this.pieceOnTile;
		}
	}
}
