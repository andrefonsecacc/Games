package com.chess.engine.Pieces;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.chess.engine.Alliance;
import com.chess.engine.board.Board;
import com.chess.engine.board.Move;
import com.chess.engine.board.Tile;

public class Knight extends Piece {

	private final static int[] CANDIDATE_MOVE_COORDINATES = {-17,-15,-10,-6,6,10,15,17};
	
	
	Knight(int piecePosition, Alliance pieceAlliance) {
		super(piecePosition, pieceAlliance);
		// TODO Auto-generated constructor stub
	}

	@Override
	public List<Move> calculateLegalMoves(Board board) {
		// TODO Auto-generated method stub
		
		int candidateDestinationCoordinate;
		final List<Move> legalMoves = new ArrayList<>();
		
		for(final int currentCandidate : CANDIDATE_MOVE_COORDINATES){
			
			candidateDestinationCoordinate = this.piecePosition + currentCandidate;
			
			if(isValidTileCoordinate(candidateDestinationCoordinate)){
				
				final Tile candidateDestinationTile = board.getTile(candidateDestinationCoordinate);
				
				if(!candidateDestinationTile.isTileOccupied()){
					legalMoves.add(new Move());
				}else{
					final Piece pieceAtDestination = candidateDestinationTile.getPiece();
					final Alliance pieceAlliance = pieceAtDestination.getPieceAlliance();
					
					
					if(this.pieceAlliance != pieceAlliance){
						legalMoves.add(new Move());
					}
					
				}
				
			}
			
		}
		
		//ImmutableList
		return Collections.unmodifiableList(legalMoves);
	}

	private boolean isValidTileCoordinate(int coordinate) {
		
		return coordinate >=0 && coordinate <64 ;
	}

}
